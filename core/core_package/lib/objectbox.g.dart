// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'src/auth/data/model/auth_dao.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 1840612338578339119),
      name: 'AuthDao',
      lastPropertyId: const IdUid(3, 3998825763172418431),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7271608783922602520),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1981334803678048095),
            name: 'token',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3998825763172418431),
            name: 'refreshToken',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2869242858013728834),
      name: 'HomeDao',
      lastPropertyId: const IdUid(4, 2165034246917321600),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1048493704411636710),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7073660778466245160),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2880707898835298881),
            name: 'avatar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2165034246917321600),
            name: 'createdAt',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 2869242858013728834),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5150590878266194490],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3334949527245380719,
        2510459459248845853,
        6495432478422200356
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AuthDao: EntityDefinition<AuthDao>(
        model: _entities[0],
        toOneRelations: (AuthDao object) => [],
        toManyRelations: (AuthDao object) => {},
        getId: (AuthDao object) => object.id,
        setId: (AuthDao object, int id) {
          object.id = id;
        },
        objectToFB: (AuthDao object, fb.Builder fbb) {
          final tokenOffset =
              object.token == null ? null : fbb.writeString(object.token!);
          final refreshTokenOffset = object.refreshToken == null
              ? null
              : fbb.writeString(object.refreshToken!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, tokenOffset);
          fbb.addOffset(2, refreshTokenOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AuthDao(
              token: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              refreshToken: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8))
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    HomeDao: EntityDefinition<HomeDao>(
        model: _entities[1],
        toOneRelations: (HomeDao object) => [],
        toManyRelations: (HomeDao object) => {},
        getId: (HomeDao object) => object.id,
        setId: (HomeDao object, int id) {
          object.id = id;
        },
        objectToFB: (HomeDao object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final avatarOffset =
              object.avatar == null ? null : fbb.writeString(object.avatar!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, avatarOffset);
          fbb.addOffset(3, createdAtOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HomeDao(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              avatar: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              createdAt: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AuthDao] entity fields to define ObjectBox queries.
class AuthDao_ {
  /// see [AuthDao.id]
  static final id = QueryIntegerProperty<AuthDao>(_entities[0].properties[0]);

  /// see [AuthDao.token]
  static final token = QueryStringProperty<AuthDao>(_entities[0].properties[1]);

  /// see [AuthDao.refreshToken]
  static final refreshToken =
      QueryStringProperty<AuthDao>(_entities[0].properties[2]);
}

/// [HomeDao] entity fields to define ObjectBox queries.
class HomeDao_ {
  /// see [HomeDao.id]
  static final id = QueryIntegerProperty<HomeDao>(_entities[1].properties[0]);

  /// see [HomeDao.name]
  static final name = QueryStringProperty<HomeDao>(_entities[1].properties[1]);

  /// see [HomeDao.avatar]
  static final avatar =
      QueryStringProperty<HomeDao>(_entities[1].properties[2]);

  /// see [HomeDao.createdAt]
  static final createdAt =
      QueryStringProperty<HomeDao>(_entities[1].properties[3]);
}
